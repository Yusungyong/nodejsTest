var mysql = require('mysql');
var Q = require('q');

var poolCluster = mysql.createPoolCluster();
var timeout = 30000;

// a nice wrapper for the mysql library
// effectively acts as a buffer so
// we can implement promises
// and not need to worry about callbacks
function Connection(name) {
		var deferred = Q.defer();
		var self = this;

		// create the connection and assign it to the connection
		// variable, then return the object instance
		poolCluster.getConnection(name, function (err, connection) {
				if (err) {
						return deferred.reject(err);
				}
				self.connection = connection;

				return deferred.resolve(self);
		});

		return deferred.promise;
}

Connection.prototype.query = function (sql, params) {
		var deferred = Q.defer();
		var self = this;

		params = params || {};

		this.connection.query({sql: sql, timeout: 30000}, params, function (err, rows) {

				self.connection.release();

				if (err) {
						return deferred.reject(err);
				}

				return deferred.resolve(rows);
		});

		return deferred.promise;
};


module.exports = function (conf) {

		// loop the possible configurations
		// and initialize the cluster
		Object.keys(conf).forEach(function (value, key) {
				poolCluster.add(value, this[value]);

				// check the connections and report findings
				query(value, 'SELECT 1').then(function () {
						console.log('Connected to ' + value + ' mysql db');
				}, function (err) {
						console.log('Error connecting to ' + value + ' mysql db - check connection string');
						console.log(err);
				});

		}, conf);
};

function query (name, query, params) {

		//database.query('SELECT');
		if (!params && !query) {
				query = name;
				name = 'default';
		}

		// database.query('SELECT *', []);
		if (!params && (query instanceof Array)) {
				params = query;
				query = name;
				name = 'default';
		}

		var connection = new Connection(name);

		return connection.then(function (connection) {
				return connection.query(query, params);
		}).fail(function(err){
				switch(err.toString()){
						case "Error: Pool is closed.":
						case "Error: Pool does not exist.":
									 console.log("Detected pool has closed - process will now exit to allow restart via Forever");
									 process.exit(1);
									 break;
						default:
									 throw err;
				}
		});
}

module.exports.query = query;
